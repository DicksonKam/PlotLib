name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t plotlib:latest .
    
    - name: Test Docker container
      run: |
        # Create output directory with proper permissions
        mkdir -p output
        chmod 777 output  # Ensure container can write
        
        # Run tests in container
        echo "🧪 Running PlotLib tests..."
        docker run --rm plotlib:latest /bin/sh -c "/app/build/tests/basic_tests"
        
        # Run example to test plotting functionality
        echo "📊 Running example plot generation..."
        docker run --rm -v $(pwd)/output:/app/output:Z plotlib:latest /app/build/examples/01_first_scatter_plot
        
        # Debug: Show directory structure and permissions
        echo "📁 Output directory info:"
        ls -la output/ || echo "Output directory is empty or doesn't exist"
        echo "🔍 Looking for any image files:"
        find output/ -name "*.png" -o -name "*.svg" 2>/dev/null || echo "No image files found"
        
        # Check if the expected file exists
        if [ -f output/beginner_01_first_scatter_plot.png ]; then
          # Check file size to ensure it's a real image
          file_size=$(stat -c%s output/beginner_01_first_scatter_plot.png 2>/dev/null || stat -f%z output/beginner_01_first_scatter_plot.png)
          if [ "$file_size" -lt 1000 ]; then
            echo "❌ Error: Generated file is too small (${file_size} bytes)"
            exit 1
          fi
          echo "✅ Docker container test passed! Generated ${file_size} byte PNG file."
        else
          echo "❌ Error: Expected output file was not generated at output/beginner_01_first_scatter_plot.png"
          
          # Additional debugging
          echo "🔍 Directory permissions:"
          ls -ld output/
          echo "🔍 All files in output/:"
          find output/ -type f 2>/dev/null || echo "No files found"
          
          # Try running the container with debug info
          echo "🐛 Debug: Re-running with verbose output..."
          docker run --rm -v $(pwd)/output:/app/output:Z plotlib:latest /bin/sh -c "
            echo 'Working directory:' && pwd &&
            echo 'Output directory exists?' && ls -la /app/output &&
            echo 'Running example...' &&
            /app/build/examples/01_first_scatter_plot &&
            echo 'After running:' && ls -la /app/output
          "
          exit 1
        fi
    
    - name: Test Docker Compose
      run: |
        # Test the test service
        echo "🧪 Testing Docker Compose test service..."
        docker compose up --exit-code-from plotlib-test plotlib-test
        
        # Test quick demo
        echo "🎯 Testing Docker Compose demo service..."
        DEMO_TYPE=01_first_scatter_plot docker compose up --exit-code-from plotlib-demo plotlib-demo
        
        echo "✅ Docker Compose tests passed!"
    
    - name: Upload Docker test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-output
        path: output/

  docker-multi-platform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test multi-platform build capability
      run: |
        echo "🏗️ Testing multi-platform build capability..."
        
        # Test AMD64 build (current platform)
        docker buildx build \
          --platform linux/amd64 \
          -t plotlib:amd64-test \
          --load \
          .
        
        # Test that the AMD64 build works
        echo "🧪 Testing AMD64 build..."
        docker run --rm plotlib:amd64-test /bin/sh -c "/app/build/tests/basic_tests"
        
        # Test ARM64 build (without loading, just to verify it builds)
        echo "🏗️ Verifying ARM64 build capability..."
        docker buildx build \
          --platform linux/arm64 \
          -t plotlib:arm64-test \
          . || echo "⚠️ ARM64 build skipped (expected on non-ARM64 runner)"
        
        echo "✅ Multi-platform build tests completed!" 