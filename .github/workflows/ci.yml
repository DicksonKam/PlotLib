name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        compiler: [gcc, clang]
        exclude:
          - os: macOS-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config libcairo2-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        brew install cmake cairo pkg-config

    - name: Set up compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        else
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi

    # Replicate build.sh logic exactly
    - name: Build PlotLib (following build.sh)
      run: |
        echo "🔨 PlotLib Build Script (GitHub CI)"
        echo "=================================="
        
        # Check if build directory exists (from build.sh line 12-15)
        if [ -d "build" ]; then
            echo "🧹 Removing existing build directory..."
            rm -rf build
        fi
        
        # Create build directory (from build.sh line 17-20)
        echo "📁 Creating build directory..."
        mkdir build
        cd build
        
        # Configure with CMake (from build.sh line 22-24)
        echo "⚙️  Configuring with CMake..."
        cmake .. -DCMAKE_BUILD_TYPE=Release
        
        # Build library (from build.sh line 26-28)
        echo "📚 Building library..."
        make plotlib -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        
        # Build examples (from build.sh line 30-34)
        echo "📊 Building examples..."
        make beginner_examples -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        make advanced_examples -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        make plot_types_examples -j$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 2)
        
        # Build and run tests (from build.sh line 36-39)
        echo "🧪 Building and running tests..."
        make basic_tests
        ./tests/basic_tests
        
        echo ""
        echo "✅ Build completed successfully!"

    - name: Test example execution (verify build.sh works)
      run: |
        # Create output directory
        mkdir -p output
        
        # Test individual example (matches build.sh output)
        echo "🧪 Testing example execution..."
        ./build/examples/01_first_scatter_plot
        
        # Verify output was created
        if [ -f "output/beginner_01_first_scatter_plot.png" ]; then
          echo "✅ Example execution successful!"
        else
          echo "❌ Example execution failed - no output generated"
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}-${{ matrix.compiler }}
        path: |
          build/
          output/