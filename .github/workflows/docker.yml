name: Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  docker-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t plotlib:latest .
    
    # Replicate docker-compose.yml logic exactly
    - name: Test Docker container (following docker-compose.yml)
      run: |
        # Create output directory (cross-platform)
        mkdir output
        
        # Run the exact same command as docker-compose.yml (cross-platform volume syntax)
        echo "üê≥ Running PlotLib Container (following docker-compose.yml logic)..."
        docker run --rm \
          -v "${PWD}/output:/app/output" \
          -e PLOTLIB_OUTPUT_DIR=/app/output \
          plotlib:latest \
          /bin/sh -c "
          echo 'PlotLib Container - Running All Examples...' &&
          cd /app &&
          echo 'Running beginner examples...' &&
          for example in /app/build/examples/[0-9][0-9]_*; do
            if [ -x \"\$example\" ]; then
              echo \"  Running \$(basename \$example)...\"
              \$example
            fi
          done &&
          echo 'Running advanced examples...' &&
          for example in /app/build/examples/advanced_*; do
            if [ -x \"\$example\" ]; then
              echo \"  Running \$(basename \$example)...\"
              \$example
            fi
          done &&
          echo 'Running plot_types examples...' &&
          for example in /app/build/examples/plot_types_*; do
            if [ -x \"\$example\" ]; then
              echo \"  Running \$(basename \$example)...\"
              \$example
            fi
          done &&
          echo 'Running tests...' &&
          /app/build/tests/basic_tests &&
          echo 'All examples and tests completed! Check ./output for generated plots.'
          "

    - name: Verify Docker output (same as docker-compose.yml expectation)
      shell: bash
      run: |
        echo "üìÅ Checking output directory..."
        ls output/ 2>/dev/null || echo "Output directory is empty or doesn't exist"
        
        # Cross-platform file counting
        echo "üìä Looking for generated plot files..."
        
        # Verify we have the expected files from all categories (cross-platform)
        if [ -f "output/beginner_01_first_scatter_plot.png" ]; then
          echo "‚úÖ Beginner examples generated"
        else
          echo "‚ùå Missing beginner examples"
          exit 1
        fi
        
        # Check for advanced examples (cross-platform)
        found_advanced=false
        for file in output/advanced_*; do
          if [ -f "$file" ]; then
            found_advanced=true
            break
          fi
        done
        if [ "$found_advanced" = true ]; then
          echo "‚úÖ Advanced examples generated"
        else
          echo "‚ùå Missing advanced examples"
          exit 1
        fi
        
        # Check for plot_types examples (cross-platform)
        found_plot_types=false
        for file in output/plot_types_*; do
          if [ -f "$file" ]; then
            found_plot_types=true
            break
          fi
        done
        if [ "$found_plot_types" = true ]; then
          echo "‚úÖ Plot types examples generated"
        else
          echo "‚ùå Missing plot_types examples"
          exit 1
        fi
        
        echo "‚úÖ Docker container test passed!"

    - name: Test Docker Compose equivalence
      shell: bash
      run: |
        # Test that direct docker-compose also works
        echo "üß™ Testing docker-compose up plotlib equivalence..."
        docker-compose up --exit-code-from plotlib plotlib
        
        echo "‚úÖ Docker Compose tests passed!"

    - name: Upload Docker test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-output-${{ matrix.os }}
        path: output/

  docker-multi-platform:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Test multi-platform build
      run: |
        echo "üèóÔ∏è Testing multi-platform Docker build..."
        
        # Build for multiple platforms (production deployment ready)
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -t plotlib:multi-platform \
          .
        
        echo "‚úÖ Multi-platform build completed!"